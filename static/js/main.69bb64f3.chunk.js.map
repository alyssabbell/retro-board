{"version":3,"sources":["components/task/Task.js","components/column/Column.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","className","placeholder","aria-label","rows","value","taskList","onChange","e","setTaskList","target","Column","useState","clickCount","setClickCount","header","type","onClick","Array","map","item","index","key","App","id","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSA8BeA,G,MA3BF,SAACC,GAQV,OAEI,yBAAKC,UAAU,WACX,8BAAUA,UAAU,kBAAkBC,YAAY,kBAAkBC,aAAW,kBAC7EC,KAAK,IACLC,MAAOL,EAAMM,SACbC,SAZU,SAACC,GACjBR,EAAMS,YAAYD,EAAEE,OAAOL,SAQvB,wBAOA,6BACI,4BAAQJ,UAAU,oBAAlB,KACA,4BAAQA,UAAU,sBAAlB,KACA,4BAAQA,UAAU,qBAAlB,SCuBDU,G,MA3CA,SAACX,GAAU,MAGUY,mBAAS,IAHnB,mBAGfN,EAHe,KAGLG,EAHK,OAIcG,mBAAS,GAJvB,mBAIfC,EAJe,KAIHC,EAJG,KA0BtB,OACI,yBAAKb,UAAU,UACX,wBAAIA,UAAU,cAAcD,EAAMe,QAClC,4BAAQd,UAAU,aAAae,KAAK,SAASC,QAPpC,WACjBH,EAAcD,EAAW,KAMjB,KAEC,YAAIK,MAAML,IAAaM,KAAI,SAACC,EAAMC,GAEjC,OAAQ,6BACE,kBAAC,EAAD,CAAMf,SAAUA,EAAUG,YAAaA,EAAaa,IAAKD,WCrBlEE,MAbf,WACE,OACE,yBAAKtB,UAAU,OACb,wBAAIuB,GAAG,SAAP,eACA,yBAAKA,GAAG,SACN,kBAAC,EAAD,CAAQC,MAAM,QAAQV,OAAO,YAAYO,IAAI,aAC7C,kBAAC,EAAD,CAAQG,MAAM,OAAOV,OAAO,aAAaO,IAAK,aAC9C,kBAAC,EAAD,CAAQG,MAAM,SAASV,OAAO,eAAeO,IAAI,gBCCrCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.69bb64f3.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Task.css\";\n\nconst Task = (props) => {\n\n    const handleInput = (e) => {\n        props.setTaskList(e.target.value);\n    }\n\n    //console.log(props.item);\n    \n    return (\n        // <!-- A retro card (retrospective item) -->\n        <div className=\"taskbox\">\n            <textarea className=\"text-input-area\" placeholder=\"Enter text here\" aria-label=\"Enter text here\"\n              rows=\"1\"\n              value={props.taskList}\n              onChange={handleInput}>\n            >\n                  Here is an example\n            </textarea>\n            <div>\n                <button className=\"task-button left\">L</button>\n                <button className=\"task-button delete\">X</button>\n                <button className=\"task-button right\">R</button>\n            </div>\n    </div>\n    )\n};\n\nexport default Task;\n","import React, { useState } from 'react';\nimport Task from '../task/Task.js';\nimport \"./Column.css\";\n\nconst Column = (props) => {\n   // const [addClicked, setAddClicked] = useState(false);\n    // use this state to hold the list of Tasks from each task component\n    const [taskList, setTaskList] = useState([]);\n    const [clickCount, setClickCount] = useState(0);\n    \n    // const handleTaskChange = (e) => {\n    //     //alert(\"handleChange Reached\");\n    //      const newList = [\n    //          ...taskList, \"\"]\n    //     setTaskList(newList);\n    // };\n\n    // const addTask = () => {\n    //      return (\n    //      <div>\n    //             <Task taskList={taskList} setTaskList={setTaskList} />\n    //         </div>\n    //      )\n    // };\n\n   // console.log(clickCount);\n   const addClicks = () => {\n    setClickCount(clickCount+1);\n   }\n    // console.log(clickCount);\n    return (\n        <div className=\"column\">\n            <h2 className=\"col-header\">{props.header}</h2>\n            <button className=\"add-button\" type=\"button\" onClick={addClicks}>+</button>\n \n          {  [...Array(clickCount)].map((item, index) => {\n              \n              return (<div> \n                        <Task taskList={taskList} setTaskList={setTaskList} key={index}/> \n                    </div>\n              )\n          })           \n        }       \n        </div>\n    )\n};\n\nexport default Column;     \n\n","import React from 'react';\nimport './App.css';\nimport Column from './components/column/Column.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 id=\"title\">Retro Board</h1>\n      <div id=\"board\">\n        <Column color=\"green\" header=\"Went Well\" key=\"column-1\"/>\n        <Column color=\"pink\" header=\"To Improve\" key =\"column-2\"/>\n        <Column color=\"purple\" header=\"Action Items\" key=\"column-3\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}